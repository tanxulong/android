package com.tanxulong.chartpractise;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Point;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;

public class ChartView extends View {
	private String tag = "ChartView-----------";
	private DisplayMetrics dm;
	private int top = 0; // seven days a week
	private int deviceWidth = 0;
	private int deviceHeight = 0;
	private int xCount = 7; // seven days a week
	private int yCount = 10; // 0~50C, 5/line
	// x,y 单位长度
	private float xDistance = 0;
	private float yDistance = 0;
	private Point pointZero = new Point();
	private Point pointMaxY = new Point();
	private Point pointMaxX = new Point();
	private Paint line1 = new Paint();
	private Paint legend1 = new Paint(); // 图例

	private int[] data1 = { 1, 2, 3, 4, 5, 6, 7 };
	private int[] data2 = { 23, 33, 19, 22, 34, 28, 19 };

	private Paint point = new Paint();

	public ChartView(Context context, AttributeSet attrs, int defStyleAttr) {
		super(context, attrs, defStyleAttr);
		// TODO Auto-generated constructor stub
	}

	public ChartView(Context context, AttributeSet attrs) {
		super(context, attrs);
		// TODO Auto-generated constructor stub
	}

	public ChartView(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
	}

	@Override
	protected void onDraw(Canvas canvas) {

		super.onDraw(canvas);
		initPoints();
		drawGrid(canvas);

		line1.setColor(Color.RED);
		float rate = yDistance / 5;
		float height = deviceHeight + top;
		float startX = pointZero.x, startY = 0, endX = (int) (pointZero.x + xDistance), endY = 0;
		for (int i = 0, len = data1.length; i < len; i++) {
			point.setColor(Color.RED);
			startY = height - (int) (data2[i] * rate) ;
			canvas.drawCircle(startX, startY, 5, point);
			if ((len - 1) == i) {
				break;
			}

			endY = dm.widthPixels - (int) (data2[i + 1] * rate);
			canvas.drawLine(startX, startY, endX, endY, line1);
			startX += xDistance;
			endX += xDistance;
		}

	}

	private void initPoints() {
		deviceWidth = dm.widthPixels;
		deviceHeight = dm.heightPixels;
		xDistance = (float) (deviceWidth * 0.7) / xCount;
		yDistance = (float) (deviceHeight * 0.6) / yCount;
		/**
		 * 高取屏幕的70% 宽60%
		 */
		// 顶端距屏幕上部15%
		top = (int) (deviceWidth * 0.15);
		/**
		 * 计算原点的位置， 屏幕左下角
		 */
		pointZero.x = (int) (deviceWidth * 0.15);
		pointZero.y = (int) (deviceHeight * 0.7);

		/**
		 * 计算X轴终点的位置， 屏幕右下角
		 */
		pointMaxX.x = (int) (deviceWidth * 0.85);
		pointMaxX.y = (int) (deviceHeight * 0.7);

		/**
		 * 计算y轴终点的位置， 屏幕左上角
		 */
		pointMaxY.x = (int) (deviceWidth * 0.15);
		pointMaxY.y = (int) (deviceHeight * 0.1);

	}

	/**
	 * 
	 * 绘制网格
	 * 
	 * 分别绘制x，y方向的线
	 * 
	 * @param canvas
	 */
	private void drawGrid(Canvas canvas) {
		Paint linePaint = new Paint();
		Paint labelPaint = new Paint();
		linePaint.setColor(Color.DKGRAY);
		labelPaint.setColor(Color.DKGRAY);
		labelPaint.setTextAlign(Align.CENTER);

		// 多大合适/设备适配/单位是什么？
		labelPaint.setTextSize(40);
		// x
		float x = pointZero.x, y = pointZero.y;
		for (int i = 0; i <= xCount; i++) {
			canvas.drawLine(x, y, x, pointMaxY.y, linePaint);
			canvas.drawText(i + 1 + "", x, y + 35, labelPaint);
			x += xDistance;
		}

		// y
		x = pointZero.x;
		y = pointZero.y;
		labelPaint.setTextAlign(Align.RIGHT);
		labelPaint.setTextSize(40);
		for (int i = 0; i <= yCount; i++) {
			canvas.drawLine(x, y, pointMaxX.x, y, linePaint);
			canvas.drawText(i * 5 + "", x - 10, y + 10, labelPaint);
			y -= yDistance;
		}
	}

	public DisplayMetrics getDm() {
		return dm;
	}

	public void setDm(DisplayMetrics dm) {
		this.dm = dm;
	}

}
